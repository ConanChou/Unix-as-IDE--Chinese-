编译
====

Unix 平台下有很多编译和解释代码的工具，它们用法各异。然而，但是概念上很多步骤是一样的。这里我将讨论用 GNU 编译器集里的 ``gcc`` 编译 C，并简要介绍用 ``perl`` 作为解释器。

GCC
---

`GCC <http://gcc.gnu.org/>`_ 是个非常成熟的 GPL 许可的编译器集。也许大家知道得最多的还是用它来编译 C 和 C++ 程序。它的免费以及它广泛的装载在 Unix 类似的系统上（例如 Linux 和 BSD）,使得它如此长久地流行。当然，现在还有一些更加现代化的使用 `LLVM <http://llvm.org/>`_ 架构的替代编译器，比如 `Clang <http://clang.llvm.org/>`_\。

最好别把 GNU 编译器集的前端二进制码当作是一组各自为政的完整的编译器，而是把它当作将一组离散的工具串联起来的驱动器，用以执行分析、编译和链接等步骤。这就意味着你既可以把 GCC 当作相对简单的命令行来把 C 源文件直接编译到可执行二进制，你也可以用它来检查和调试编译过程中的每个小步骤。

在这里我不会去讨论 ``make`` 文件，虽说对于任何多于一个文件的 C 项目必不可少。我们会在下一章有关创建和自动化工具的文章中讨论。

目标码的编译和汇编
------------------

你可以如此将 C 源码编译到目标码： ::
    
    $ gcc -c example.c -o example.o

假设这是个 C 程序代码没有问题，这将会在当前目录有下生成一个未链接的二进制目标文件 ``example.o``\，或者它会告诉你编译为何失败。你可以用 ``objdump`` 来检查它的汇编程序： ::
    
    $ objdump -D example.o


